#sidebar AleSidebar

= Capturing Application: Quick Start =

== Overview ==

This tutorial will guide you through an example scenario, how the Fosstrak Capturing Application can be used to link the Fosstrak ALE and the Fosstrak EPCIS repository by retrieving ECReports from the ALE and delivering EPCIS events to the EPCIS repository. The tutorial shows two different solutions to the scenario described below (A simple one and a more elaborate one).

== Scenario ==

We model a simple store equipped with three RFID readers. One reader (`Reader_GoodsReceiving`) in the backend, where incoming goods are registered by the staff. A second reader (`Reader_PointOfExit`) installed at the exit door that either warns about stolen goods or thanks the customer for the purchasing. The third reader (`Reader_PointOfSale`) is installed at the cash desk.

  * `Reader_GoodsReceiving`: Upon tag read: write a new entry into the EPCIS repository (new registered item).
  * `Reader_PointOfSale`: Upon tag read: check the EPCIS repository if the tag has already been sold. If not sold, create a new entry in the repository, flaging the tag as sold.
  * `Reader_PointOfExit`: Upon tag read: check the EPCIS repository if the tag has been sold. If not sold, raise an alarm.

== Prerequisites ==

  * a copy of the `fc-server-1.0.1.war` or newer
  * a copy of the `fc-webclient fc-webclient-1.0.1.war` or newer
  * a copy of the `epcis-repository-0.4.2.war` or newer
  * a copy of the `hal-simulator`. Select `hal-impl-sim-0.5.0-bin-with-dependencies.[zip|tar.gz]` or newer
  * Configuration files:
    * [http://fosstrak.googlecode.com/svn/wikires/ale/capturingapp/Reader_GoodsReceiving.xml Reader_GoodsReceiving.xml] (both scenarios)
    * [http://fosstrak.googlecode.com/svn/wikires/ale/capturingapp/Reader_PointOfExit.xml Reader_PointOfExit.xml] (both scenarios)
    * [http://fosstrak.googlecode.com/svn/wikires/ale/capturingapp/Reader_PointOfSale.xml Reader_PointOfSale.xml] (both scenarios)
    * [http://fosstrak.googlecode.com/svn/wikires/ale/capturingapp/SimulatorClient.xml SimulatorClient.xml] (both scenarios)
    * [http://fosstrak.googlecode.com/svn/wikires/ale/capturingapp/SimulatorController.xml SimulatorController.xml] (both scenarios)
    * [http://fosstrak.googlecode.com/svn/wikires/ale/capturingapp/EventCycle_GoodsReceiving.xml EventCycle_GoodsReceiving.xml] (simple scenario)
    * [http://fosstrak.googlecode.com/svn/wikires/ale/capturingapp/EventCycle_PointOfExit.xml EventCycle_PointOfExit.xml] (simple scenario)
    * [http://fosstrak.googlecode.com/svn/wikires/ale/capturingapp/EventCycle_PointOfSale.xml EventCycle_PointOfSale.xml] (simple scenario)
    * [http://fosstrak.googlecode.com/svn/wikires/ale/capturingapp/fosstrakDemo.xml fosstrakDemo.xml] (elaborate scenario)
  * [http://tomcat.apache.org/ Apache Tomcat] Java Servlet Container

== Preparations ==

The preparations need to be performed for both solutions.

=== Start the multi reader simulator ===

We use a simulator to generate the tag input for the Filtering & Collection. The multi reader simulator is capable of simulating several readers in one application, allowing you to move tags from one reader to another.

First unpack `hal-impl-sim-VERSION-bin-with-dependencies` to a folder of your choice (example `c:\fosstrakDemo`).

Open a command line and run the simulator.

{{{
cd c:\fosstrakDemo
java -cp hal-impl-sim-0.5.0\hal-impl-sim-0.5.0.jar org.fosstrak.hal.impl.sim.multi.SimulatorServerController
}}}

If everything runs fine, an empty window should pop up.

http://fosstrak.googlecode.com/svn/wikires/ale/capturingapp/simulatorController.png

=== Prepare EPCIS repository ===

If you already have a running instance of an EPCIS repository, you can skip this step. Otherwise follow the [EpcisUserGuide installation instructions] of the Fosstrak EPCIS repository.

=== Prepare the Filtering & Collection ===

Deploy the Fosstrak Filtering & Collection to your Tomcat `webapps` folder (by simply copying the WAR file into the folder). We need access to the configuration files packed into the WAR file, so unpack the war-file into the `webapps` folder.

Copy the two configuration files `SimulatorClient.xml` and `SimulatorController.xml` into the folder `webapps\fc-server-VERSION\WEB-INF\classes\props` (overwrite the existing copies).

We recommend to adjust the log level for the Filtering & Collection from either `DEBUG` or `INFO` to `ERROR`. To do so, open the file `webapps\fc-server-VERSION\WEB-INF\classes\log4j.properties` and adjust the log level:

{{{
file: <TOMCAT_FOLDER>\webapps\fc-server-VERSION\WEB-INF\classes\log4j.properties

# class specific levels
log4j.logger.org.fosstrak = ERROR
}}}

== Simple Solution ==

This solution sets up an `EventCycle` for each reader. This allows the capturing application to distinguish between different readers by the name of the `EventCycle`.

Please ensure, that you followed the setup in Preparations.

Copy the fc-webclient and the capturing-app WAR files into the Tomcat `webapps` folder und unpack the capturing-app file (We need to adjust a few configuration parameters).

=== Adjust the configuration ===

  # First, we define a new capturing application that is listening on port 9999 for incoming ECReports, and that is delivering EPCIS events to the EPCIS repository at `http://localhost:8080/epcis-repository-0.4.2/capture`. Open the file `webapps/capturing-app-VERSION/WEB-INF/classes/captureapplication.properties` and set the configuration below:
    {{{
file: <TOMCAT_FOLDER>/webapps/capturing-app-VERSION/WEB-INF/classes/captureapplication.properties

n=1

cap.0.port=9999
cap.0.name=myFirstCaptureApp
cap.0.epcis=http://localhost:8080/epcis-repository-0.4.2/capture
}}}
  # Second, we instruct the capturing application to use the simple solution for the scenario. Open the file `webapps/capturing-app-VERSION/WEB-INF/classes/changeset.xml` and set the configuration below:
    {{{
file: <TOMCAT_FOLDER>/webapps/capturing-app-VERSION/WEB-INF/classes/changeset.xml

<change-set xmlns='http://drools.org/drools-5.0/change-set'
            xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'
            xs:schemaLocation='http://drools.org/drools-5.0/change-set.xsd' >
   <add>
      <resource source='classpath:drools/SimpleWareHouse-3EventCycles.drl' type='DRL' />
   </add>
</change-set>
}}}
  # Start Tomcat now.

=== Setup the readers ===

  # Start your web browser and point it to the address of the web-based client.
    {{{
http://<SERVER>:<PORT>/<WEBCLIENT_VERSION>/services/ALEWebClient.jsp

example:
http://localhost:8080/fc-webclient-1.0.1/services/ALEWebClient.jsp
}}}
  # Set the endpoint to the filtering and collection server's Logical Reader API by selecting `setEndPoint(String endPointName)` in the !LogicalReader API. Click "Invoke" to execute the command.
    {{{
endpoint: http://<SERVER>:<PORT>/<FCSERVER_VERSION>/services/ALELRService

example: 
http://localhost:8080/fc-server-1.0.1/services/ALELRService
}}}
  # Verify that a connection between the web-based client and the server can be established by clicking `getVendorVersion()`. A version number should be returned.
  # The next step is to establish a connection from the Filtering & Collection to the reader simulator (basically this means to setup three different readers).
    # Click on `define(String readerName, LRSpec spec)` in the section !LogicalReader API. Do not confuse the `define` method for an !EventCycle with the `define` method for a logical reader! Define three readers. Make sure to set the reader names exactly as they are written below.
      # Reader_GoodsReceiving with Reader_GoodsReceiving.xml
      # Reader_PointOfSale with Reader_PointOfSale.xml
      # Reader_PointOfExit with Reader_PointOfExit.xml
      {{{
Example:

readerName: Reader_PointOfSale
specFilePath: c:\fosstrakDemo\Reader_PointOfSale.xml
}}}