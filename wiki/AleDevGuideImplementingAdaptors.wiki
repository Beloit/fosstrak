#sidebar AleSidebar

= Implementing Adaptors =

== Objective ==

This guide is intented for developers who wish to integrate a tag reader into to the Logical Reader API of the fosstrak ALE. The guide gives three examples to three existing Adaptors. In the second part a more detailed explanation about how to implement your own adaptor is given.

There are two different types of Logical Reader Definitions that should not be confused!

  * Dynamic Logical Reader Definitions:
    Dynamic Logical Reader Definitions are read by the fc-client and the fc-webclient. If you want to specify a logical reader at runtime through the Logical Reader API you need to use a Dynamic Logical Reader.

  * Static Logical Reader Definitions:
    Static Logical Reader Definitions are read/written by the Logical Reader Manager upon ALE deployment. They contain additional information for the Logical Reader Manager.

== HALAdaptor ==

The HALAdaptor provides an adaptor to the Hardware Abstraction Layer (HAL).

=== Schematic ===

Currently the HALAdaptor creates a !SimulatorController object. This object in turn then sets up the HAL device as requested by the properties file.

http://fosstrak.googlecode.com/svn/wikires/ale/HALAdaptor.png

For example properties files refer to:
  * BatchSimulator.xml for a batch simulator
  * GraphicSimulator.xml for a graphical simulator

The HAL devices from the Fosstrak project currently do not provide a polling mechanism. To retrieve Tags from these devices we therefor need a mechanism to periodically poll the device. We chose an identifyThread that polls the HAL device in a regular time interval.

http://fosstrak.googlecode.com/svn/wikires/ale/HALAdaptorPolling.png

=== Required parameters ===

You need to provide all the following parameters to the HALAdaptor:
  * isComposite: is the reader a composite reader (false).
  * ReaderType: the class name of the implementor (org.fosstrak.ale.server.readers.hal.HALAdaptor)
  * PhysicalReaderName: the name of the underlying physical reader.
  * ReadTimeInterval: how often to read from the reader.
  * PropertiesFile: the properties file for the HAL reader.
The xml definitions slightly differ for the dynamic and the static definition. Two full examples are given to illustrate where the parameters are defined.

=== Load HAL other than SimulatorController ===

If you want to load a HAL implementation not contained in the simulator framework (eg. impinj or feig implementation) you need to specify the corresponding implementation in the configuration file.

_ATTENTION_: Make sure that your implementation of the HardwareAbstraction interface provides a public constructor of the form _XYZ(String halName, String configFile)_.

Example 1: for the Impinj HAL (add the following property to the required properties)
{{{
<property>
        <name>ImplementingClass</name>
        <value>org.fosstrak.hal.impl.impinj.ImpinjTCPIPController</value>
</property

Example 2: for the feig hal from fosstrak
// add the following property to the required properties
<property>
        <name>ImplementingClass</name>
        <value>org.fosstrak.hal.impl.feig.FeigTCPIPController</value>
</property>

Example 3: for the simulator controller (default)
// add the following property to the required properties
<property>
        <name>ImplementingClass</name>
        <value>org.fosstrak.hal.impl.sim.SimulatorController</value>
</property
}}}

=== Dynamic definition ===

Sample configuration for a HALAdaptor:

{{{
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns3:LRSpec xmlns:ns2="urn:epcglobal:ale:wsdl:1" 
        xmlns:ns3="urn:epcglobal:ale:xsd:1">
    <isComposite>false</isComposite>
    <readers/>
    <properties>
        <property>
            <name>ReaderType</name>
            <value>org.fosstrak.ale.server.readers.hal.HALAdaptor</value>
        </property>
        <property>
            <name>Description</name>
            <value>My first HAL device reader</value>
        </property>
        <property>
            <name>PhysicalReaderName</name>
            <value>MyReader1</value>
        </property>
        <property>
            <name>ReadTimeInterval</name>
            <value>1000</value>
        </property>
        <property>
            <name>PropertiesFile</name>
            <value>/props/SimulatorController.xml</value>
        </property>
    </properties>
</ns3:LRSpec>
}}}

=== Static definition ===

In addition to the dynamic definition you must provide the reader name.

Sample configuration for a HALAdaptor:

{{{
<LogicalReader name="LogicalReader1">
        <LRSpec isComposite="false" 
                readerType="org.fosstrak.ale.server.readers.hal.HALAdaptor">
                <LRProperty name="Description" 
                        value="HAL reader created during system startup"/>
                <LRProperty name="AdaptorClass" value="HAL"/>
                <LRProperty name="PhysicalReaderName" value="MyReader"/>
                <LRProperty name="ReadTimeInterval" value="1000"/>
                <LRProperty name="PropertiesFile" 
                        value="/props/SimulatorController.xml"/>
                <LRProperty name="ReadPoints" value="Shelf1,Shelf2"/>
        </LRSpec>
</LogicalReader>
}}}

== RPAdaptor ==

The RPAdaptor provides an adaptor to the reader protokoll (RP).

=== Schematic ===

The RPAdaptor provides a default constructor and an initializer method. Both are called in the construction phase of the LogicalReader. The RPAdaptor implements all methods that are required by the logical reader API (basically these are the methods that are specified in LogicalReader and in BaseReader).

Aside the standard methods and fields the RPAdaptor requires some more functionality to communicate with a rp-proxy. The InputGenerator sets up the connection between the RPAdaptor and the rp-proxy. There are two channels that need to be created. The first one (command channel) is created for the communication from the RPAdaptor to the rp-proxy. The command channel uses the connection settings provided by !ConnectionPoint. The second channel (notification channel) is used for the communication from the rp-proxy to the RPAdaptor and provides a channel for the delivery of tags from the physical reader. The settings provided by !NotificationPoint are used to set up this channel. As soon as the RPAdaptor is started through the logical reader API the rp-proxy sends tag events that are then processed by the !InputGenerator and sent through the RPAdaptor to the observers (!CompositeReader or !EventCycle).

http://fosstrak.googlecode.com/svn/wikires/ale/RPAdaptor.png

The reader protocol provides a tag-smoothing by hardware. In the current implementation of the RPAdaptor we do not use this feature and poll the adaptor in a regular time intervall through a identifyThread instead. The main reason why we did without the tag smoothing is mainly an architectural decision. The reports generation performs this action in a higher application level again. To allow maximum flexibility in this high level tag smoothing we wanted to provide as many tags as possible.

http://fosstrak.googlecode.com/svn/wikires/ale/RPAdaptorPolling.png

=== Required parameters ===

You need to provide all the following parameters to the RPAdaptor:
  * isComposite: is the reader a composite reader (false).
  * !ReaderType: the class name of the implementor (org.fosstrak.ale.server.readers.hal.HALAdaptor)
  * !PhysicalReaderName: the name of the underlying physical reader.
  * !ReadTimeInterval: how often to read from the reader.
  * !PhysicalReaderSource: the sources where to read from (one rp reader can have several different sources).
  * !NotificationPoint: The notification point where to send notifications.
  * !ConnectionPoint: The controll connection point.
The xml definitions slightly differ for the dynamic and the static definition. Two full examples are given to illustrate where the parameters are defined.

=== Dynamic definition ===

Sample configuration for a RPAdaptor:

{{{
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns3:LRSpec xmlns:ns2="urn:epcglobal:ale:wsdl:1" 
        xmlns:ns3="urn:epcglobal:ale:xsd:1">
    <isComposite>false</isComposite>
    <readers/>
    <properties>
        <property>
            <name>ReaderType</name>
            <value>org.fosstrak.ale.server.readers.rp.RPAdaptor</value>
        </property>
        <property>
            <name>Description</name>
            <value>This Logical Reader consists of shelf 1 
                and shelf 2,3,4 of the physical 
                reader named MyReader</value>
        </property>
        <property>
            <name>PhysicalReaderName</name>
            <value>MyReader</value>
        </property>
        <property>
            <name>ReadTimeInterval</name>
            <value>1000</value>
        </property>
        <property>
            <name>PhysicalReaderSource</name>
            <value>Shelf1,Shelf2,Shelf3,Shelf4</value>
        </property>
        <property>
            <name>NotificationPoint</name>
            <value>http://localhost:9090</value>
        </property>
        <property>
            <name>ConnectionPoint</name>
            <value>http://localhost:8000</value>
        </property>
    </properties>
</ns3:LRSpec>
}}}

=== Static definition ===

Sample configuration for a RPAdaptor:

{{{
<LogicalReader name="LogicalReader1">
        <LRSpec isComposite="false" 
                readerType="org.fosstrak.ale.server.readers.rp.RPAdaptor">
                <LRProperty name="Description" value="My physical Reader"/>
                <LRProperty name="ConnectionPoint" 
                        value="http://localhost:8000"/>
                <LRProperty name="NotificationPoint" 
                        value="http://localhost:9090"/>
                <LRProperty name="ReadTimeInterval" value="200"/>
                <LRProperty name="AdaptorClass" value="ReaderProtocol"/>
                <LRProperty name="PhysicalReaderName" value="MyReader"/>
                <LRProperty name="PhysicalReaderSource" 
                        value="Shelf1,Shelf2,Shelf3,Shelf4"/>
        </LRSpec>
</LogicalReader>
}}}

== LLRPAdaptor ==
